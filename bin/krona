#!/usr/bin/env ruby

require "bundler/setup"
require "optionparser"
require_relative "../krona"

CITIES = [
  "Aartselaar",
  "Leuven",
  "Hamont-Achel",
  "Kortrijk",
  "De Panne",
  "Herentals",
  "Antwerpen",
  "Peer",
  "Edegem",
  "Kontich",
  "Mortsel",
  "Balen",
  "Heist-op-den-Berg",
  "Pelt",
  "Veurne",
  "Kampenhout",
  "Olen",
  "Boom"
]

options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: "

  opts.on("-o", "--output [SHELL]", "Shell or HTML") do |output|
    options[:output] = output
  end

  opts.on("-f", "--filename [NAME]", "Filename to save to") do |name|
    options[:file_name] = name
  end
end

opts.parse!(ARGV)

action = ARGV.pop

parser = Krona::Parser.new(directory: "data")

def output_or_save(content, filename)
  if filename
    File.open(filename, "w") {|f| f.puts content }
    puts "  -> Saved to #{filename}"
  else
    puts content
  end
end

case action
when "cities"
  if options[:output] == "html"
    today = Date.today.strftime("%a %d/%m")
    html = Krona::HTMLPrinter.new(parser.cities(last_n_days: 10), title: "Kronacheck on #{today}").html
    output_or_save(html, options[:file_name])
  else
    Krona::ShellPrinter.new(parser.cities, title: "Cities").overview
  end
when "provinces"
  if options[:output] == "html"
    html = Krona::HTMLPrinter.new(parser.provinces, title: "Provinces").html
    output_or_save(html, options[:file_name])
  else
    Krona::ShellPrinter.new(parser.provinces, title: "Provinces").overview
  end
when "twitterpp"
  if options[:output] == "html"
    today = Date.today.strftime("%a %d/%m")
    html = Krona::HTMLPrinter.new(parser.cities, limit_to: CITIES, title: "Kronacheck on #{today}").html
    output_or_save(html, options[:file_name])
  else
    Krona::ShellPrinter.new(parser.cities, limit_to: CITIES, title: "Cities").overview
  end
when "csv"
  csv =  Krona::CSVPrinter.new(parser.cities_with_nis(last_n_days: 1000), title: "Cities").csv
  output_or_save(csv, options[:file_name])
when "fetch"
  Krona::Fetcher.new(Krona::START_DATE).call
when "check"
  if Krona::Fetcher.new(Krona::START_DATE).new_data?
    puts "New data!"
    exit 0
  else
    puts "Nothing new"
    exit 1
  end
else
  puts "Unknown action. Should be one of: cities, provinces, twitterpp or csv"
end
